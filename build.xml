<?xml version="1.0" encoding="UTF-8"?>

<project name="WPN-XM Server Stack" default="main">

    <!--
         WPN-XM - Phing build file.

         You might find the comprehensive Nant Task Reference under:
         http://www.phing.info/docs/stable/hlhtml/index.html
    -->

    <!--
                        Build Properties
    -->

    <!-- Version -->
    <property name="wpnxm.Name"             value="WPN-XM Server Stack"/>
    <property name="version.Major"          value="0"/>
    <property name="version.Minor"          value="8"/>
    <property name="version.BuildNumber"    value="0"/>
    <property name="wpnxm.Version"          value="${version.Major}.${version.Minor}.${version.BuildNumber}"/>

    <!-- Paths -->
    <property name="dir.Base"               value="${project.basedir}"/>
    <property name="dir.Build"              value="${dir.Base}\_build"/>
    <property name="dir.Downloads"          value="${dir.Base}\downloads"/>
    <property name="dir.Installers"         value="${dir.Base}\installers"/>
    <property name="dir.Registry"           value="${dir.Base}\registry"/>

    <property name="innosetupcompiler"      value="${dir.Base}\bin\innosetup\ISCC.exe"/>
    <property name="dir.qmake"              value="D:\Qt\Qt5.2.0\5.2.0-rc1\mingw48_32\bin"/>
    <property name="dir.mingw32"            value="D:\Qt\Qt5.2.0\Tools\mingw48_32\bin\"/>

    <!--
                        Targets (Build Commands)
    -->

    <target name="clean-build-dir" description="Mr. Proper cleans the build environment and recreates it.">
        <delete dir="${dir.Build}"/>
        <mkdir dir="${dir.Build}"/>
        <delete dir="${dir.Downloads}\stripdown"/>
        <delete dir="${dir.Base}/www/tools/webinterface"/>
        <delete>
            <fileset dir="${dir.Registry}">
                <include name="**/downloads*.json" />
            </fileset>
        </delete>
    </target>

    <target name="reset-git-submodules" description="Reset the git submodules to their original state.">
         <!-- hard reset to latest commit and drop all untracked files and folders, e.g. /build crap. -->
        <exec command="git submodule foreach &quot;git reset --hard HEAD&quot;" level="debug" passthru="true"/>
    </target>

    <!-- The "git" command must be on your env path, check that with "env|grep PATH". -->
    <target name="update-git-submodules"
            description="Updating git submodules. Fetching latest version of server-control-panel and webinterface.">
        <exec command="git submodule update --init --recursive --force" level="debug" passthru="true"/>
        <exec command="git submodule foreach &quot;git pull origin master&quot;" level="debug" passthru="true"/>
    </target>

    <target name="bump-version-number"
            description="Inserts the current version number into the InnoScripts, Webinterface and Server-Control-Panel.">

        <!--
                Insert the version number into the innosetup script files.
                This is done via a copy operation with an applied filterchain, see below.
                The then preprocessed *.iss files are moved from the /installers folder to the /build directory.
                Because they are used for the actual build, this step must run before any "compile-*" step.
        -->

        <echo msg="Inserting Version Number into Installer Script Files"/>
        <copy todir="${dir.Build}" overwrite="true">
            <fileset dir="${dir.Installers}">
                <include name="**"/>
            </fileset>
            <filterchain>
                <replacetokens>
                    <token key="APPVERSION" value="${wpnxm.Version}"/>
                </replacetokens>
            </filterchain>
        </copy>

        <!-- WPN-XM Server Control Panel -->
        <loadfile file="${dir.Base}/server-control-panel/src/version.h" property="filecontent.wpnxm.version">
            <filterchain>
                <replacetokens>
                     <token key="APPVERSION" value="${wpnxm.Version}"/>
                </replacetokens>
            </filterchain>
        </loadfile>
        <delete file="${dir.Base}/server-control-panel/src/version.h"/>
        <echo file="${dir.Base}/server-control-panel/src/version.h">${filecontent.wpnxm.version}</echo>

        <!-- Insert the version number into webinterface's "bootstrap.php" file. (file is overwritten) -->
        <loadfile file="${dir.Base}/www/tools/webinterface/bootstrap.php" property="filecontent.php.bootstrap">
            <filterchain>
                <replacetokens>
                    <token key="APPVERSION" value="${wpnxm.Version}"/>
                </replacetokens>
            </filterchain>
        </loadfile>
        <delete file="${dir.Base}/www/tools/webinterface/bootstrap.php"/>
        <echo file="${dir.Base}/www/tools/webinterface/bootstrap.php">${filecontent.php.bootstrap}</echo>
    </target>

    <target name="print-version-number">
        <echo message="Building ${wpnxm.Name}-${wpnxm.Version} Setup Executables"/>
    </target>

    <target name="clean-webinterface-folder">
        <echo message="Cleans the webinterface folder for production, by removing .git and dev files."/>
        <!-- git -->
        <delete file="${dir.Base}/www/tools/webinterface/.git"/>
        <delete file="${dir.Base}/www/tools/webinterface/.gitignore"/>
        <delete file="${dir.Base}/www/tools/webinterface/.gitattributes"/>
        <!-- dev -->
        <delete file="${dir.Base}/www/tools/webinterface/.travis.yml"/>
        <delete file="${dir.Base}/www/tools/webinterface/composer.json"/>
        <delete dir="${dir.Base}/www/tools/webinterface/tests"/>
    </target>

    <target name="commit-versionized-registries"
            description="Commits the versionized WPN-XM Software Component Registries (all untracked files in /registry folder).">
        <exec command="git add -A ${dir.Registry}" level="debug" passthru="true"/>
        <exec command="git commit -am Added WPN-XM Installer Registries for Version ${wpnxm.Version}" dir="${dir.Registry}" level="debug" passthru="true"/>
    </target>

    <target name="inno-compile">
        <echo message="Compiling ${installer.file}"/>
        <exec command="${innosetupcompiler} -o${dir.Build} ${dir.Build}\${installer.file}" level="debug" passthru="true"/>
    </target>

    <target name="compile-webinstaller" description="Builds the WPN-XM setup executable." depends="bump-version-number, clean-webinterface-folder">
        <foreach target="inno-compile" param="installer.file">
            <fileset dir="${dir.Build}">
                <include name="**/webinstaller-*.iss"/>
                <exclude name="**/webinstalller-debug-*.iss"/>
            </fileset>
        </foreach>
    </target>

    <target name="compile-webinstaller-debug" description="Builds the WPN-XM setup executable for debugging."
            depends="bump-version-number, clean-webinterface-folder">
        <foreach target="inno-compile" param="installer.file">
            <fileset dir="${dir.Build}">
                <include name="**/webinstalller-debug-*.iss"/>
            </fileset>
        </foreach>
    </target>

    <target name="compile-lite"
            description="Builds the WPN-XM setup executable using already downloaded components. Assumes that stripdowns are done."
            depends="bump-version-number, clean-webinterface-folder">
        <foreach target="inno-compile" param="installer.file">
            <fileset dir="${dir.Build}">
                <include name="**/lite-*.iss"/>
            </fileset>
        </foreach>
    </target>

    <target name="compile-lite-no-download"
            description="Builds the WPN-XM setup executable using already downloaded components. Assumes that stripdowns are done."
            depends="bump-version-number, clean-webinterface-folder">
        <foreach target="inno-compile" param="installer.file">
            <fileset dir="${dir.Build}">
                <include name="**/lite-*.iss"/>
            </fileset>
        </foreach>
    </target>

    <target name="compile-standard"
            description="Downloads all components and builds the WPN-XM setup executable."
            depends="download-components, stripdown-mariadb, stripdown-mongodb, stripdown-postgresql, prepare-downloads">
        <foreach target="inno-compile" param="installer.file">
            <fileset dir="${dir.Build}">
                <include name="**/standard-*.iss" />
            </fileset>
        </foreach>
    </target>

    <target name="compile-standard-no-download"
            description="Builds the WPN-XM setup executable using already downloaded components. Assumes that stripdowns are done."
            depends="bump-version-number, clean-webinterface-folder">
        <foreach target="inno-compile" param="installer.file">
            <fileset dir="${dir.Build}">
                <include name="**/standard-*.iss" />
            </fileset>
        </foreach>
    </target>

    <target name="compile-full"
            description="Downloads all components and builds the WPN-XM setup executable."
            depends="download-components, stripdown-mariadb, stripdown-mongodb, stripdown-postgresql">
        <foreach target="inno-compile" param="installer.file">
            <fileset dir="${dir.Build}">
                <include name="**/full-*.iss" />
            </fileset>
        </foreach>
    </target>

    <target name="compile-full-no-download"
            description="Builds the WPN-XM setup executable using already downloaded components. Assumes that stripdowns are done."
            depends="bump-version-number, clean-webinterface-folder">
        <foreach target="inno-compile" param="installer.file">
            <fileset dir="${dir.Build}">
                <include name="**/full-*.iss" />
            </fileset>
        </foreach>
    </target>

    <!--
                        Downloads

    -->

    <target name="prepare-downloads" description="Moves components for all packaged installers from the full folder to their subfolder.">
        <echo message=" Moving components from the full download folder to their subfolders... "/>

        <adhoc-task name="MoveDownloadFiles"><![CDATA[
            class MoveDownloadFiles extends Task {
                private $registryfolder;
                private $downloadfolder;
                private $wpnxmversion;

                function setRegistryFolder($registryfolder)
                {
                    $this->registryfolder = $registryfolder;
                }

                function setDownloadFolder($downloadfolder)
                {
                    $this->downloadfolder = $downloadfolder;
                }

                function setWpnxmVersion($wpnxmversion)
                {
                    $this->wpnxmversion = $wpnxmversion;
                }

                function main() {
                    // e.g. "registries\*0.8.0*.json"
                    $registries = glob($this->registryfolder . '\*' . $this->wpnxmversion . '*.json');

                    foreach($registries as $registry)
                    {
                        $basename = basename($registry, '.json');

                        // skip full, because thats our download source
                        if(false !== strpos($basename, 'full')) {
                            continue;
                        }

                        $fullFolder = preg_replace('(lite|standard)', 'full', $basename);

                        $this->log("\n");
                        $this->log('Moving Download Files for "' . $basename . '" from "' . $fullFolder . '"');
                        $this->log("\n");

                        $components = json_decode(file_get_contents($registry));

                        foreach($components as $component)
                        {
                            $source = $this->downloadfolder . '\\'.$fullFolder.'\\' . $component[2];

                            if(is_file($source)) {
                                $this->log('Component ' . $component[0] . ' v' . $component[3]);

                                $targetDir = $this->downloadfolder. '\\'. $basename;

                                if(!is_dir($targetDir)) {
                                    mkdir($targetDir);
                                }

                                $target = $targetDir . '\\' . $component[2];

                                $this->log('  Copying ' . $source);
                                $this->log('       to ' . $target);

                                if(!is_file($target)) {
                                    copy($source, $target);
                                } else {
                                    $this->log('Target file exists already.');
                                }

                            } else {
                                $this->log('Component ' . $component[0] . '- missing download: ' . $component[2]);
                            }
                        }
                    }
                }
            }
        ]]></adhoc-task>
        <!-- how to access properties defined in build.xml inside an adhoc-task? can we get rid of passing stuff in? -->
        <MoveDownloadFiles registryfolder="${dir.Registry}" downloadfolder="${dir.Downloads}" wpnxmversion="${wpnxm.Version}"/>
    </target>

    <target name="create-download-files" description="Generate download.txt files for all full installers. Create aria2c file for multiple parallel downloads.">
        <adhoc-task name="GenerateDownloadFiles"><![CDATA[
            class GenerateDownloadFiles extends Task
            {
                private $registryfolder;
                private $downloadfolder;
                private $wpnxmversion;

                function setRegistryFolder($registryfolder)
                {
                    $this->registryfolder = $registryfolder;
                }

                function setDownloadFolder($downloadfolder)
                {
                    $this->downloadfolder = $downloadfolder;
                }

                function setWpnxmVersion($wpnxmversion)
                {
                    $this->wpnxmversion = $wpnxmversion;
                }

                function getAriaFileHeader($installerName)
                {
                    $txt = '#' . PHP_EOL;
                    $txt .= '# WPN-XM Server Stack' . PHP_EOL;
                    $txt .= '#' . PHP_EOL;
                    $txt .= '# Download Links for the Installation Wizard "' . $installerName . '".' . PHP_EOL;
                    $txt .= '#' . PHP_EOL;
                    $txt .= '# This is an aria2c input file.' . PHP_EOL;
                    $txt .= '# It contains a list of URIs for aria2 to download in parallel.' . PHP_EOL;
                    $txt .= '# The file is auto-generated. Do not modify.' . PHP_EOL;
                    $txt .= '#' . PHP_EOL;
                    $txt .= '# For syntax, see:' . PHP_EOL;
                    $txt .= '#   http://aria2.sourceforge.net/manual/en/html/aria2c.html#id2' . PHP_EOL;
                    $txt .= '#' . PHP_EOL;
                    return $txt;
                }

                // add a download line in Aria2C Syntax
                function insertDownload($url = '', $target = '')
                {
                    $txt .= $url . PHP_EOL;
                    $txt .= '    out=' . $target . PHP_EOL;

                    return $txt;
                }

                function main()
                {
                    $registries = glob($this->registryfolder . '\full-' . $this->wpnxmversion . '-*.json');

                    foreach($registries as $registry) {

                        $basename = basename($registry, '.json');
                        $file = $this->registryfolder . '\\downloads-for-' . $basename . '.txt';

                        $txt = $this->getAriaFileHeader($basename);

                        $components = json_decode(file_get_contents($registry));

                        foreach($components as $component)
                        {
                            $url = $component[1];
                            $target = 'downloads\\' . $basename . '\\' . $component[2];

                            $txt .= $this->insertDownload($url, $target);
                        }

                        file_put_contents($file, $txt);

                        $this->log('Created Aria2 Download Description File - ' . $file);
                    }
                }
            }
        ]]></adhoc-task>
        <!-- how to access properties defined in build.xml inside an adhoc-task? can we get rid of passing stuff in? -->
        <GenerateDownloadFiles registryfolder="${dir.Registry}" downloadfolder="${dir.Downloads}" wpnxmversion="${wpnxm.Version}"/>
    </target>

    <target name="versionize-registries" description="Adds the build version number to the 'next' installer registry files.">
        <copy todir="${dir.Registry}">
          <mapper type="regexp" from="^(.*)-next-(.*).json" to="\1-${wpnxm.Version}-\2.json"/>
          <fileset dir="${dir.Registry}">
            <include name="**/*next*.json"/>
          </fileset>
        </copy>
    </target>

    <target name="download-components" description="Download components for all full installers."
    	    depends="update-git-submodules, make-downloads-dir, create-download-files">
        <foreach target="downloading-components-for-installer" param="installer.aria.downloads">
            <fileset dir="${dir.Registry}">
                <include name="**/downloads-for-full-${wpnxm.Version}-*.txt" />
            </fileset>
        </foreach>
    </target>

    <target name="downloading-components-for-installer" description="Downloads all components for building the 'not-web' Installers.">
        <!--
                        Aria2C for Parallel Downloading

            http://sourceforge.net/apps/trac/aria2/wiki/UsageExample
            http://aria2.sourceforge.net/manual/en/html/aria2c.html
        -->
        <echo msg="Using ${dir.Registry}\${installer.aria.downloads}" />
        <exec command="${dir.Base}\bin\aria\aria2c.exe -i ${dir.Registry}\${installer.aria.downloads} --max-connection-per-server=8 --max-tries=5 --conditional-get=true --auto-file-renaming=false --allow-overwrite=true --http-accept-gzip=true --user-agent=WPN-XM Server Stack Downloader" level="debug" passthru="true" dir="${dir.Base}" escape="false"/>
    </target>

    <target name="kill-aria" description="Provides a (safety net) process kill for a dangling aria2c process.">
        <exec command="${dir.Base}\bin\killprocess\Process.exe -k aria2c.exe" passthru="true"/>
    </target>

    <target name="make-downloads-dir" unless="${directory::exists(dir.Downloads)}">
         <mkdir dir="${dir.Downloads}"/>
    </target>

    <!--
                        Stripdown Scripts

         We are re-packaging several components, because they ship files, which are
         hardly ever needed by the average developer.

         The stripdown procedure consists of the following steps:

         1. the stripdown folder is deleted and re-created, to have a clean target folder
         2. the downloaded component is unziped into the stripdown folder
         3. if the component zip shipped a versionized folder it is renamed to a short name
         4. the stripdown script for this component is executed, reducing the files
         5. the original zip file is deleted
         6. the stripdown folder is zipped to the download folder, under the short name of the component
         7. the stripdown folder is deleted

     -->

    <target name="recreate-stripdown-folder">
        <delete dir="${dir.Downloads}/stripdown"/>
        <mkdir dir="${dir.Downloads}/stripdown"/>
    </target>

    <target name="stripdown-mariadb" description="Stripdown MariaDB and repackage. (136MB to 16MB on v5.5.28!)"
            depends="recreate-stripdown-folder"
            if="${file::get-length(dir.Downloads + '\mariadb.zip') &gt; 25000000}"><!-- 25MB -->
        <unzip zipfile="${dir.Downloads}\mariadb.zip" todir="${dir.Downloads}\stripdown"/>
        <exec command="cmd.exe /c move ${dir.Downloads}\stripdown\mariadb* ${dir.Downloads}\stripdown\mariadb" passthru="true"/>
        <exec command="${dir.Base}\bin\stripdown-mariadb.bat ${dir.Downloads}\stripdown\mariadb" passthru="true"/>
        <delete file="${dir.Downloads}\mariadb.zip"/>
        <zip zipfile="${dir.Downloads}\mariadb.zip">
            <fileset basedir="${dir.Downloads}\stripdown">
                <include name="**/*"/>
            </fileset>
        </zip>
        <delete dir="${dir.Downloads}\stripdown"/>
    </target>

    <target name="stripdown-mongodb" description="Stripdown MongoDB and repackage. (55MB to 16MB on v2.2.1!)"
            depends="recreate-stripdown-folder"
            if="${file::get-length(dir.Downloads + '\mongodb.zip') &gt; 50000000}"><!-- 50MB -->
        <unzip zipfile="${dir.Downloads}\mongodb.zip" todir="${dir.Downloads}\stripdown"/>
        <exec command="cmd.exe /c move ${dir.Downloads}\stripdown\mongo* ${dir.Downloads}\stripdown\mongodb" passthru="true"/>
        <exec command="${dir.Base}\bin\stripdown-mongodb.bat" passthru="true">
            <arg value="${dir.Downloads}\stripdown\mongodb"/>
        </exec>
        <delete file="${dir.Downloads}\mongodb.zip"/>
        <zip zipfile="${dir.Downloads}\mongodb.zip">
            <fileset basedir="${dir.Downloads}\stripdown">
                <include name="**/*"/>
            </fileset>
        </zip>
        <delete dir="${dir.Downloads}\stripdown"/>
    </target>

    <target name="stripdown-postgresql" description="Stripdown PostgreSQL and repackage. (xxMB to xxMB on vx.y.z!)"
            depends="recreate-stripdown-folder"
            if="${file::get-length(dir.Downloads + '\postgresql.zip') &gt; 25000000}"><!-- 25MB -->
        <unzip zipfile="${dir.Downloads}\postgresql.zip" todir="${dir.Downloads}\stripdown"/>
        <exec command="${dir.Base}\bin\stripdown-postgresql.bat ${dir.Downloads}\stripdown\pgsql" passthru="true"/>
        <delete file="${dir.Downloads}\postgresql.zip"/>
        <zip zipfile="${dir.Downloads}\postgresql.zip">
            <fileset basedir="${dir.Downloads}\stripdown">
                <include name="**/*"/>
            </fileset>
        </zip>
        <delete dir="${dir.Downloads}\stripdown"/>
    </target>

    <!--
                        WPN-XM Server Control Panel - Build Tasks

    -->

    <target name="build-server-control-panel"
            description="Prepares the freshly build SCP zip archive for distribution."
            depends="compile-server-control-panel">
            <!-- zip the build/release folder to "_build/wpnxm-scp-1.2.3"-->
            <echo message="Building zip archive of Server-Control-Panel for distribution"/>
            <zip zipfile="${dir.Base}/_build/wpnxm-scp-${wpnxm.Version}.zip" ziplevel="9">
                <fileset basedir="${dir.Base}/server-control-panel/build/release/">
                    <include name="**/*" />
                </fileset>
            </zip>
            <!-- copy zip to the downloads folder -->
            <copy file="${dir.Base}/_build/wpnxm-scp-${wpnxm.Version}.zip" tofile="${dir.Base}/downloads/wpnxmscp.zip" />

            <echo message="Clean Server-Control-Panel folder"/>
            <!-- remove files, ignores and folders. you might add "n" for dry-run -->
            <exec command="git clean -fxd" dir="${dir.Base}/server-control-panel/" passthru="true"/>
    </target>

    <target name="compile-server-control-panel"
            description="Compiles the Server Control Panel Tray Application via Qt Framework and it's build tools."
            depends="update-git-submodules, bump-version-number">
            <!-- This tasks requires that you have installed Qt and setup all environment path vars correctly.
                 The build tools will not be found otherwise. -->

        <exec command="qmake v" dir="${dir.qmake}"/>

        <echo message="QMAKE Query"/>
        <exec command="qmake -query" dir="${dir.qmake}" passthru="true"/>
        <echo message="Clean Server-Control-Panel folder"/>
        <!-- remove files, ignores and folders. you might add "n" for dry-run -->
        <exec command="git clean -fxd" dir="${dir.Base}/server-control-panel/" passthru="true"/>

        <!-- http://doc-snapshot.qt-project.org/4.8/qmake-variable-reference.html -->
        <exec command="${dir.qmake}\qmake" dir="${dir.Base}/server-control-panel/" passthru="true">
        	<arg value=" -r -spec win32-g++ -o Makefile ${dir.Base}/server-control-panel/wpnxm-servercontrolpanel.pro -Wall"/>
    	</exec>

        <exec command="${dir.mingw32}\mingw32-make -v" passthru="true"/>

        <exec command="${dir.mingw32}\mingw32-make -f Makefile.Release -j4" dir="${dir.Base}/server-control-panel/" passthru="true">
			<environment>
				<variable name="PATH" value="${dir.mingw32}"/>
			</environment>
        </exec>

        <echo message="Copy runtime deependencies of Qt"/>
        <exec command="${dir.mingw32}\mingw32-make install" dir="${dir.Base}/server-control-panel/" passthru="true"/>

        <echo message="Cleaning build directory"/>
        <exec command="${dir.mingw32}\mingw32-make clean" dir="${dir.Base}/server-control-panel/" passthru="true"/>

        <echo message="Removing all unneeded debugging symbols and sections from executable..."/>
        <exec command="${dir.mingw32}\strip.exe -s wpn-xm.exe -o wpn-xm.exe.stripped" dir="${dir.Base}/server-control-panel/build/release/" passthru="true"/>
        <sleep seconds="3"/>
        <exec command="cmd.exe /c move wpn-xm.exe.stripped wpn-xm.exe" dir="${dir.Base}/server-control-panel/build/release/" passthru="true"/>

        <echo message="Compressing executable..."/>
        <exec command="${dir.Base}/bin/upx/upx -9 ${dir.Base}/server-control-panel/build/release/*.exe" level="verbose" passthru="true"/>

    </target>

    <target name="main"
            depends="clean-build-dir,
                    reset-git-submodules,
                    update-git-submodules,
                    bump-version-number,
                    print-version-number,
                    clean-webinterface-folder,
                    versionize-registries,
                    download-components,
                    compile-webinstaller,
                    compile-webinstaller-debug,
                    compile-standard,
                    compile-full,
                    compile-lite,
                    commit-versionized-registries,
                    reset-git-submodules,
                    kill-aria">
    </target>


</project>