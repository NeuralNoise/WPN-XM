<?xml version="1.0" encoding="utf-8"?>
<project xmlns="http://nant.sf.net/release/0.91/nant.xsd" name="WPN-XM" default="all">

    <!--
         WPN-XM - NAnt build file.

         You might find the comprehensive Nant Task Reference under:
         http://nant.sourceforge.net/release/latest/help/tasks/index.html
    -->

    <!-- Version -->
    <property name="wpnxm.Name"             value="WPN-XM Server Stack"/>
    <property name="version.Major"          value="0"/>
    <property name="version.Minor"          value="6"/>
    <property name="version.BuildNumber"    value="0"/>
    <property name="wpnxm.Version"          value="${version.Major}.${version.Minor}.${version.BuildNumber}"/>

    <!-- Paths -->
    <property name="dir.Base"               value="${project::get-base-directory()}"/>
    <property name="dir.Build"              value="${dir.Base}\_build"/>
    <property name="dir.Downloads"          value="${dir.Base}\downloads"/>

    <property name="innosetupcompiler"      value="${dir.Base}\bin\innosetup\ISCC.exe"/>
    <property name="dir.qmake"              value="D:\Qt\Qt5.2.0\5.2.0-rc1\mingw48_32\bin"/>
    <property name="dir.mingw32"            value="D:\Qt\Qt5.2.0\Tools\mingw48_32\bin\"/>

    <!-- File Names -->
    <property name="wpnxm.ZipFileName"      value="WPNXM-${wpnxm.Version}.zip"/>
    <property name="wpnxm.ZipFile"          value="${dir.Build}\${wpnxm.ZipFileName}"/>

    <!-- Targets (Build Commands) -->

    <target name="clean-build-dir" description="Mr. Proper cleans the build environment and recreates it.">
        <delete dir="${dir.Build}"/>
        <mkdir dir="${dir.Build}"/>
        <delete dir="${dir.Downloads}\stripdown"/>
    </target>

    <target name="bump-version-number"
            description="Inserts the current version number into the InnoScripts, Webinterface and Server-Control-Panel.">
        <!--
            Insert the version number into the innosetup script files.
            This is done via a copy operation with an applied filterchain, see below.
            The then preprocessed *.iss files are moved from the /innosetup folder to the /build directory.
            Because they are used for the actual build, this step must run before any "compile-wpnxm-*" step.
        -->
        <copy todir="${dir.Build}" overwrite="true">
            <fileset basedir="${dir.Base}/innosetup/">
                <include name="wpn-xm-webinstaller-w32.iss"/>
                <include name="wpn-xm-webinstaller-debug-w32.iss"/>
                <include name="wpn-xm-allinone-installer-w32.iss"/>
                <include name="wpn-xm-bigpack-installer-w32.iss"/>
                <include name="wpn-xm-lite-installer-w32.iss"/>
            </fileset>
            <filterchain>
                <replacetokens>
                    <token key="APPVERSION" value="${wpnxm.Version}"/>
                </replacetokens>
            </filterchain>
        </copy>

        <!-- WPN-XM Server Control Panel -->
        <loadfile file="${dir.Base}/server-control-panel/src/version.h" property="filecontent.wpnxm.version" encoding="UTF-8">
            <filterchain>
                <replacetokens>
                     <token key="APPVERSION" value="${wpnxm.Version}"/>
                </replacetokens>
            </filterchain>
        </loadfile>
        <delete file="${dir.Base}/server-control-panel/src/version.h"/>
        <echo file="${dir.Base}/server-control-panel/src/version.h">${filecontent.wpnxm.version}</echo>

        <!-- Insert the version number into webinterface's "bootstrap.php" file. (file is overwritten) -->
        <loadfile file="${dir.Base}/www/webinterface/bootstrap.php" property="filecontent.php.bootstrap" encoding="UTF-8">
            <filterchain>
                <replacetokens>
                    <token key="APPVERSION" value="${wpnxm.Version}"/>
                </replacetokens>
            </filterchain>
        </loadfile>
        <delete file="${dir.Base}/www/webinterface/bootstrap.php"/>
        <echo file="${dir.Base}/www/webinterface/bootstrap.php" encoding="UTF-8">${filecontent.php.bootstrap}</echo>
    </target>

    <target name="print-version-number">
        <echo message="Building ${wpnxm.Name}-${wpnxm.Version} Setup Executable"/>
    </target>

    <target name="compile-wpnxm-webinstaller-setup" description="Builds the WPN-XM setup executable."
            depends="bump-version-number">
        <exec program="${innosetupcompiler}">
            <!-- use our build dir as output dir -->
            <arg value="-o${dir.Build}"/>
            <!-- use files from build folder (tokens replaced) -->
            <arg value="${dir.Build}\wpn-xm-webinstaller-w32.iss"/>
        </exec>
    </target>

    <target name="compile-wpnxm-webinstaller-debug-setup" description="Builds the WPN-XM setup executable for debugging."
            depends="bump-version-number">
        <exec program="${innosetupcompiler}">
            <!-- use our build dir as output dir -->
            <arg value="-o${dir.Build}"/>
            <!-- use files from build folder (tokens replaced) -->
            <arg value="${dir.Build}\wpn-xm-webinstaller-debug-w32.iss"/>
        </exec>
    </target>

    <target name="compile-wpnxm-lite-installer" description="Downloads all components and builds the WPN-XM setup executable."
            depends="download-components, stripdown-mariadb, stripdown-mongodb, prepare-downloads-lite">
        <exec program="${innosetupcompiler}">
            <!-- use our build dir as output dir -->
            <arg value="-o${dir.Build}"/>
            <!-- use files from build folder (tokens replaced) -->
            <arg value="${dir.Build}\wpn-xm-lite-installer-w32.iss"/>
        </exec>
    </target>

    <target name="prepare-downloads-lite" description="Moves all components for the Lite installer from the downloads folder to downloads/lite."
            depends="versionize-registries">
        <echo message="&#xa; Moving All-In-One Components &#xa;"/>
        <foreach item="Line" in="${dir.Base}/registry/wpnxm-software-registry-lite-${wpnxm.Version}-w32.csv" delim=","
                 property="component,source,destination,version">
            <copy file="${dir.Downloads}\${destination}" tofile="${dir.Downloads}\lite\${destination}"/>
        </foreach>
    </target>

    <target name="prepare-downloads-allinone"
            description="Moves all components for the All-In-One installer from the downloads folder to downloads/allinone."
            depends="versionize-registries">
        <echo message="&#xa; Moving All-In-One Components &#xa;"/>
        <foreach item="Line" in="${dir.Base}/registry/wpnxm-software-registry-allinone-${wpnxm.Version}-w32.csv" delim=","
                 property="component,source,destination,version">
            <copy file="${dir.Downloads}\${destination}" tofile="${dir.Downloads}\allinone\${destination}"/>
        </foreach>
    </target>

    <target name="compile-wpnxm-lite-installer-no-download"
            description="Builds the WPN-XM setup executable using already downloaded components. Assumes that stripdowns are done."
            depends="bump-version-number">
        <exec program="${innosetupcompiler}">
            <!-- use our build dir as output dir -->
            <arg value="-o${dir.Build}"/>
            <!-- use files from build folder (tokens replaced) -->
            <arg value="${dir.Build}\wpn-xm-lite-installer-w32.iss"/>
        </exec>
    </target>

    <target name="compile-wpnxm-allinone-installer"
            description="Downloads all components and builds the WPN-XM setup executable."
            depends="download-components, stripdown-mariadb, stripdown-mongodb, prepare-downloads-allinone">
        <exec program="${innosetupcompiler}">
            <!-- use our build dir as output dir -->
            <arg value="-o${dir.Build}"/>
            <!-- use files from build folder (tokens replaced) -->
            <arg value="${dir.Build}\wpn-xm-allinone-installer-w32.iss"/>
        </exec>
    </target>

    <target name="compile-wpnxm-allinone-installer-no-download"
            description="Builds the WPN-XM setup executable using already downloaded components. Assumes that stripdowns are done."
            depends="bump-version-number">
        <exec program="${innosetupcompiler}">
            <!-- use our build dir as output dir -->
            <arg value="-o${dir.Build}"/>
            <!-- use files from build folder (tokens replaced) -->
            <arg value="${dir.Build}\wpn-xm-allinone-installer-w32.iss"/>
        </exec>
    </target>

    <target name="compile-wpnxm-bigpack-installer"
            description="Downloads all components and builds the WPN-XM setup executable."
            depends="download-components, stripdown-mariadb, stripdown-mongodb">
        <exec program="${innosetupcompiler}">
            <!-- use our build dir as output dir -->
            <arg value="-o${dir.Build}"/>
            <!-- use files from build folder (tokens replaced) -->
            <arg value="${dir.Build}\wpn-xm-bigpack-installer-w32.iss"/>
        </exec>
    </target>

    <target name="compile-wpnxm-bigpack-installer-no-download"
            description="Builds the WPN-XM setup executable using already downloaded components. Assumes that stripdowns are done."
            depends="bump-version-number">
        <exec program="${innosetupcompiler}">
            <!-- use our build dir as output dir -->
            <arg value="-o${dir.Build}"/>
            <!-- use files from build folder (tokens replaced) -->
            <arg value="${dir.Build}\wpn-xm-bigpack-installer-w32.iss"/>
        </exec>
    </target>

    <target name="versionize-registries"
            description="Adds the current version number to the registry .csv files.">
        <echo message="&#xa; Versionizing Registries &#xa;"/>
        <echo message="&#xa;  | Big-Pack &#xa;"/>
        <copy file="${dir.Base}/registry/wpnxm-software-registry-bigpack-w32.csv"
            tofile="${dir.Base}/registry/wpnxm-software-registry-bigpack-${wpnxm.Version}-w32.csv"/>
        <echo message="&#xa;  | All-In-One &#xa;"/>
        <copy file="${dir.Base}/registry/wpnxm-software-registry-allinone-w32.csv"
            tofile="${dir.Base}/registry/wpnxm-software-registry-allinone-${wpnxm.Version}-w32.csv"/>
        <echo message="&#xa;  | Lite &#xa;"/>
        <copy file="${dir.Base}/registry/wpnxm-software-registry-lite-w32.csv"
            tofile="${dir.Base}/registry/wpnxm-software-registry-lite-${wpnxm.Version}-w32.csv"/>
    </target>

    <target name="download-components" description="Downloads all components for building the 'not-web' Installers."
            depends="make-downloads-dir, update-git-submodules, versionize-registries">

        <foreach item="Line" in="${dir.Base}/registry/wpnxm-software-registry-bigpack-${wpnxm.Version}-w32.csv" delim=","
                 property="component,source,destination,version">

            <echo message="&#xa; Downloading ${component} &#xa;"/>

            <!-- NAnt - Native Get Command -->
            <!-- <get src="${source}" dest="${dir.Downloads}\${destination}" usetimestamp="true" verbose="true"/> -->

            <!-- WGET -->
            <!-- <exec program="${dir.Base}\bin\UnxUtils\wget.exe">
                <arg value="-N"/>
                <arg value="-O ../../downloads/${destination}"/>
                <arg value="${source}"/>
            </exec> -->

            <!-- Aria2C - http://sourceforge.net/apps/trac/aria2/wiki/UsageExample
                          http://aria2.sourceforge.net/manual/en/html/aria2c.html
            -->
            <exec program="${dir.Base}\bin\aria\aria2c.exe">
                <arg value="--max-connection-per-server=4"/>
                <arg value="--min-split-size=1M"/>
                <arg value="--max-tries=0"/> <!-- unlimited -->
                <arg value="--file-allocation=falloc"/>
                <arg value="--check-certificate=false"/>
                <arg value="--conditional-get=true"/>
                <arg value="--auto-file-renaming=false"/>
                <arg value="--allow-overwrite=true"/>
                <arg value="--http-accept-gzip=true"/>
                <arg value="--http-no-cache=true"/>
                <arg value="--user-agent=WPN-XM Server Stack Downloader"/>
                <arg value="-R"/>
                <arg value="-o downloads\${destination}"/>
                <arg value="${source}"/>
            </exec>
            -->
        </foreach>
    </target>

    <target name="stripdown-mariadb" description="Unzip MariaDB. Delete unnecessary files. Zip MariaDB. (136MB to 16MB on v5.5.28!)">
        <!-- 135 to 17.575MB -->
        <!-- target folder for unzipping -->
        <delete dir="${dir.Downloads}/stripdown" if="${directory::exists(dir.Downloads + '/stripdown')}"/>
        <mkdir dir="${dir.Downloads}/stripdown" if="${not directory::exists(dir.Downloads + '/stripdown')}"/>
        <!-- unzip mariadb -->
        <unzip zipfile="${dir.Downloads}\mariadb.zip" todir="${dir.Downloads}\stripdown"/>
        <exec program="cmd.exe" commandline="/c move ${dir.Downloads}\stripdown\mariadb* ${dir.Downloads}\stripdown\mariadb"/>
        <!-- stripdown -->
        <exec program="${dir.Base}\bin\stripdown-mariadb.bat">
            <arg value="${dir.Downloads}\stripdown\mariadb"/>
        </exec>
        <!-- rename original download file (process in use lock out?) -->
        <delete file="${dir.Downloads}\mariadb.zip"/>
        <!-- create mariadb.zip, from stripdowned mariadb folder -->
        <zip zipfile="${dir.Downloads}\mariadb.zip">
            <fileset basedir="${dir.Downloads}\stripdown">
                <include name="**/*"/>
            </fileset>
        </zip>
        <!-- delete the stripdown folder -->
        <delete dir="${dir.Downloads}\stripdown"/>
    </target>

    <target name="stripdown-mongodb" description="Unzip MongoDB. Delete unnecessary files. Zip MongoDb. (55MB to 16MB on v2.2.1!)">
        <!-- target folder for unzipping -->
        <delete dir="${dir.Downloads}/stripdown" if="${directory::exists(dir.Downloads + '/stripdown')}"/>
        <mkdir dir="${dir.Downloads}/stripdown" if="${not directory::exists(dir.Downloads + '/stripdown')}"/>
        <!-- unzip -->
        <unzip zipfile="${dir.Downloads}\mongodb.zip" todir="${dir.Downloads}\stripdown"/>
        <exec program="cmd.exe" commandline="/c move ${dir.Downloads}\stripdown\mongo* ${dir.Downloads}\stripdown\mongodb"/>
        <!-- stripdown -->
        <exec program="${dir.Base}\bin\stripdown-mongodb.bat">
            <arg value="${dir.Downloads}\stripdown\mongodb"/>
        </exec>
        <!-- rename original download file (process in use lock out?) -->
        <delete file="${dir.Downloads}\mongodb.zip"/>
        <!-- create mongodb.zip, from stripdowned mongodb folder -->
        <zip zipfile="${dir.Downloads}\mongodb.zip">
            <fileset basedir="${dir.Downloads}\stripdown">
                <include name="**/*"/>
            </fileset>
        </zip>
        <!-- delete the stripdown folder -->
        <delete dir="${dir.Downloads}\stripdown"/>
    </target>

    <target name="make-downloads-dir" unless="${directory::exists(dir.Downloads)}">
         <mkdir dir="${dir.Downloads}"/>
    </target>

    <!-- The "git" command must be on your env path, check that with "env|grep PATH". -->
    <target name="update-git-submodules"
            description="Updating git submodules. Fetching latest version of server-control-panel and webinterface.">
        <exec program="git">
             <arg value="submodule"/>
             <arg value="update"/>
             <arg value="--init"/>
             <arg value="--recursive"/>
             <arg value="--force"/>
        </exec>
        <exec program="git">
            <arg value="submodule"/>
            <arg value="foreach"/>
            <arg value="git pull origin master"/>
        </exec>
    </target>

    <target name="compile-server-control-panel"
            description="Compiles the Server Control Panel Tray Application via Qt Framework and it's build tools."
            depends="update-git-submodules, bump-version-number">
            <!-- This tasks requires that you have installed Qt and setup all environment path vars correctly.
                 The build tools will not be found otherwise. -->

        <echo message="&#xa;"/>
        <exec program="qmake" basedir="${dir.qmake}">
            <arg value="-v"/>
        </exec>

        <echo message="&#xa;QMAKE Query"/>
        <exec program="qmake" basedir="${dir.qmake}">
            <arg value="-query"/>
        </exec>

        <echo message="&#xa;Clean Server-Control-Panel folder&#xa;"/>
        <exec program="git" workingdir="${dir.Base}/server-control-panel/">
            <arg value="clean"/>
            <arg value="-fxd"/><!-- remove files, ignores and folders. you might add "n" for dry-run -->
        </exec>

        <echo message="&#xa;"/>
        <!-- http://doc-snapshot.qt-project.org/4.8/qmake-variable-reference.html -->
        <exec program="qmake" workingdir="${dir.Base}/server-control-panel/" basedir="${dir.qmake}"
              commandline="-r -spec win32-g++ -o Makefile ${dir.Base}/server-control-panel/wpnxm-servercontrolpanel.pro -Wall">
        </exec>

        <echo message="&#xa;"/>
        <exec program="mingw32-make" basedir="${dir.mingw32}">
            <arg value="-v"/>
        </exec>

        <echo message="&#xa;"/>
        <exec program="mingw32-make" workingdir="${dir.Base}/server-control-panel/" basedir="${dir.mingw32}"
              commandline="-f Makefile.Release -j4"> <!-- use 4 build jobs -->
              <environment>
                <variable name="PATH" value="${dir.mingw32}" />
              </environment>
        </exec>

        <echo message="&#xa;Copy runtime deependencies of Qt&#xa;"/>
        <exec program="mingw32-make" workingdir="${dir.Base}/server-control-panel/" basedir="${dir.mingw32}">
            <arg value="install"/>
        </exec>

        <echo message="&#xa;Cleaning build directory&#xa;"/>
        <exec program="mingw32-make" workingdir="${dir.Base}/server-control-panel/" basedir="${dir.mingw32}">
            <arg value="clean"/>
        </exec>

        <echo message="&#xa;Removing all unneeded debugging symbols and sections from executable...&#xa;"/>
        <exec program="strip.exe" verbose="true" basedir="${dir.mingw32}" workingdir="${dir.Base}/server-control-panel/build/release/"
              commandline="-s wpn-xm.exe -o wpn-xm.exe.stripped"/>
        <sleep seconds="3"/>
        <exec program="cmd.exe" workingdir="${dir.Base}/server-control-panel/build/release/"
            commandline="/c move wpn-xm.exe.stripped wpn-xm.exe"/>

        <echo message="&#xa;Compressing executable...&#xa;"/>
        <exec program="${dir.Base}/bin/upx/upx" verbose="true">
            <arg line="-9 ${dir.Base}/server-control-panel/build/release/*.exe"/>
        </exec>
    </target>

    <target name="build-server-control-panel"
            description="Prepares the freshly build SCP zip archive for distribution."
            depends="compile-server-control-panel">
            <!-- zip the build/release folder to "_build/wpnxm-scp-1.2.3"-->
            <echo message="&#xa;Building zip archive of Server-Control-Panel for distribution&#xa;"/>
            <zip zipfile="${dir.Base}/_build/wpnxm-scp-${wpnxm.Version}.zip" ziplevel="9" verbose="true">
                <fileset basedir="${dir.Base}/server-control-panel/build/release/">
                    <include name="**/*" />
                </fileset>
            </zip>
            <!-- copy zip to the downloads folder -->
            <copy file="${dir.Base}/_build/wpnxm-scp-${wpnxm.Version}.zip" tofile="${dir.Base}/downloads/wpnxmscp.zip" />

            <echo message="&#xa;Clean Server-Control-Panel folder&#xa;"/>
            <exec program="git" workingdir="${dir.Base}/server-control-panel/">
                <arg value="clean"/>
                <arg value="-fxd"/><!-- remove files, ignores and folders. you might add "n" for dry-run -->
            </exec>
    </target>

    <target name="auto-commit-versionized-registries"
            description="Commits the versionized WPN-XM Software Component Registries (all untracked files in /registry folder).">
         <exec program="git" workingdir="${dir.Base}/registry">
            <arg value="add"/>
            <arg value="-A"/>
        </exec>
        <exec program="git"  workingdir="${dir.Base}/registry">
            <arg value="commit"/>
            <arg value="-am Added WPN-XM Software Components Registry for Version ${wpnxm.Version}"/>
        </exec>
    </target>

    <target name="reset-git-submodules"
            description="Reset the git submodules to their original state. This reverts all changes made by bump-version-number during the replace operation.">
        <exec program="git">
            <arg value="submodule"/>
            <arg value="foreach"/>
            <!-- <arg value="git checkout ."/> -->
            <arg value="git reset --hard HEAD;"/> <!-- hard reset to latest commit -->
            <arg value="git clean -fxd"/> <!-- drop all untracked files, folders, e.g. /build crap. -->
        </exec>
    </target>

    <target name="all"
        depends="clean-build-dir,
                 update-git-submodules,
                 bump-version-number,
                 print-version-number,
                 compile-wpnxm-webinstaller-setup,
                 compile-wpnxm-webinstaller-debug-setup,
                 compile-wpnxm-allinone-installer,
                 compile-wpnxm-bigpack-installer,
                 compile-wpnxm-lite-installer,
                 auto-commit-versionized-registries,
                 reset-git-submodules">
    </target>

</project>