<?xml version="1.0" encoding="utf-8"?>
<project xmlns="http://nant.sf.net/release/0.91/nant.xsd"
         name="WPN-XM"
         default="all">

    <!--
         WPN-XM - NANT build file.

         You might find the comprehensive Nant Task Reference under:
         http://nant.sourceforge.net/release/latest/help/tasks/index.html
    -->

    <!-- Debug Toggle -->
    <property name="wpnxm.Debug"            value="false"/>

    <!-- Version -->
    <property name="wpnxm.Name"             value="WPN-XM Server Stack"/>
    <property name="version.Major"          value="0"/>
    <property name="version.Minor"          value="5"/>
    <property name="version.BuildNumber"    value="1"/>
    <property name="wpnxm.Version"          value="${version.Major}.${version.Minor}.${version.BuildNumber}"/>

    <!-- Paths -->
    <property name="dir.Base"               value="${project::get-base-directory()}"/>
    <property name="dir.Build"              value="${dir.Base}\_build"/>
    <property name="dir.Downloads"          value="${dir.Base}\downloads"/>

    <property name="wpnxm.DownloadFileList" value="${dir.Base}\download_filelist.csv"/>
    <property name="innosetupcompiler"      value="${dir.Base}\bin\innosetup\ISCC.exe"/>

    <!-- File Names -->
    <property name="wpnxm.ExeFileName"      value="WPNXM-${wpnxm.Version}"/>
    <property name="wpnxm.ExeFile"          value="${dir.Build}\${wpnxm.ExeFileName}"/>

    <property name="wpnxm.ZipFileName"      value="WPNXM-${wpnxm.Version}.zip"/>
    <property name="wpnxm.ZipFile"          value="${dir.Build}\${wpnxm.ZipFileName}"/>

    <!-- Targets (Build Commands) -->

    <target name="clean-build-dir" description="Mr. Proper cleans the build environment and recreates it.">
        <delete dir="${dir.Build}"/>
        <mkdir dir="${dir.Build}"/>
    </target>

    <target name="bump-version-number"
            description="Inserts the current version number into the InnoScripts, Webinterface and Server-Control-Panel.">
        <!--
             Insert the version number into the innosetup script files.
             This is done via a copy operation with an applied filterchain, see below.
             The then preprocessed iss files are moved from the /innosetup folder to the /build directory.
             Then they are used for the actual build.
             Therefore this step must run before any "compile-wpnxm-*" step.
         -->
        <copy todir="${dir.Build}" overwrite="true">
            <fileset basedir="${dir.Base}/innosetup/">
                <include name="wpn-xm-webinstaller.iss"/>
                <include name="wpn-xm-webinstaller-with-clansuite.iss"/>
                <include name="wpn-xm-webinstaller-with-opencandy.iss"/>
                <include name="wpn-xm-allinone-installer.iss"/>
            </fileset>
            <filterchain>
                <replacetokens>
                    <token key="APPVERSION" value="${wpnxm.Version}"/>
                    <token key="DEBUG" value="${wpnxm.Debug}"/>
                </replacetokens>
            </filterchain>
        </copy>

        <!-- DEBUG executable -->
        <copy todir="${dir.Build}" overwrite="true">
            <fileset basedir="${dir.Base}/innosetup/">
                <include name="wpn-xm-webinstaller-debug.iss"/>
            </fileset>
            <filterchain>
                <replacetokens>
                    <token key="APPVERSION" value="${wpnxm.Version}"/>
                    <!-- Debug on -->
                    <token key="DEBUG" value="true"/>
                </replacetokens>
            </filterchain>
        </copy>

        <!-- WPN-XM Server Control Panel -->
        <loadfile file="${dir.Base}/server-control-panel/src/version.h" property="filecontent.wpnxm.version">
            <filterchain>
                <replacetokens>
                     <token key="APPVERSION" value="${wpnxm.Version}"/>
                </replacetokens>
            </filterchain>
        </loadfile>
        <delete file="${dir.Base}/server-control-panel/src/version.h" />
        <echo file="${dir.Base}/server-control-panel/src/version.h">${filecontent.wpnxm.version}</echo>

        <!--
             Insert the version number into webinterface bootstrap php file.
             The file is overwritten.
         -->
        <loadfile file="${dir.Base}/www/webinterface/bootstrap.php" property="filecontent.php.bootstrap" encoding="UTF-8">
            <filterchain>
                <replacetokens>
                    <token key="APPVERSION" value="${wpnxm.Version}"/>
                    <token key="DEBUG" value="${wpnxm.Debug}"/>
                </replacetokens>
            </filterchain>
        </loadfile>
        <delete file="${dir.Base}/www/webinterface/bootstrap.php" />
        <echo file="${dir.Base}/www/webinterface/bootstrap.php" encoding="UTF-8">${filecontent.php.bootstrap}</echo>
    </target>

    <target name="print-version-number">
        <echo message="Building ${wpnxm.Name}-${wpnxm.Version} Setup Executable"/>
    </target>

    <target name="compile-wpnxm-webinstaller-setup" description="Builds the WPN-XM setup executable.">
        <exec program="${innosetupcompiler}">
            <!-- use our alternate file name -->
            <arg value="-f${wpnxm.ExeFileName}-Webinstaller-Setup"/>
            <!-- use our build dir as output dir -->
            <arg value="-o${dir.Build}"/>
            <!-- use files from build folder (tokens replaced) -->
            <arg value="${dir.Build}\wpn-xm-webinstaller.iss"/>
        </exec>
    </target>

    <target name="compile-wpnxm-webinstaller-debug-setup" description="Builds the WPN-XM setup executable for debugging.">
        <exec program="${innosetupcompiler}">
            <!-- use our alternate file name -->
            <arg value="-f${wpnxm.ExeFileName}-Debug-Setup"/>
            <!-- use our build dir as output dir -->
            <arg value="-o${dir.Build}"/>
            <!-- use files from build folder (tokens replaced) -->
            <arg value="${dir.Build}\wpn-xm-webinstaller-debug.iss"/>
        </exec>
    </target>

    <target name="compile-wpnxm-webinstaller-with-clansuite-setup" description="Builds the WPN-XM setup executable.">
        <exec program="${innosetupcompiler}">
            <!-- use our alternate file name -->
            <arg value="-f${wpnxm.ExeFileName}-Webinstaller-with-Clansuite-Setup"/>
            <!-- use our build dir as output dir -->
            <arg value="-o${dir.Build}"/>
            <!-- use files from build folder (tokens replaced) -->
            <arg value="${dir.Build}\wpn-xm-webinstaller-with-clansuite.iss"/>
        </exec>
    </target>

    <target name="compile-wpnxm-allinone-installer"
            description="Downloads all components and builds the WPN-XM setup executable."
            depends="download-components, stripdown-mariadb, stripdown-mongodb">
        <exec program="${innosetupcompiler}">
            <!-- use our alternate file name -->
            <arg value="-f${wpnxm.ExeFileName}-AllInOne-Setup"/>
            <!-- use our build dir as output dir -->
            <arg value="-o${dir.Build}"/>
            <!-- use files from build folder (tokens replaced) -->
            <arg value="${dir.Build}\wpn-xm-allinone-installer.iss"/>
        </exec>
    </target>

     <target name="compile-wpnxm-allinone-installer-no-download"
             description="Builds the WPN-XM setup executable using already downloaded components. Assumes that stripdowns are done.">
        <exec program="${innosetupcompiler}">
            <!-- use our alternate file name -->
            <arg value="-f${wpnxm.ExeFileName}-AllInOne-Setup"/>
            <!-- use our build dir as output dir -->
            <arg value="-o${dir.Build}"/>
            <!-- use files from build folder (tokens replaced) -->
            <arg value="${dir.Build}\wpn-xm-allinone-installer.iss"/>
        </exec>
    </target>

    <target name="download-components" description="Downloads all components for building the AllInOne Installer."
            depends="make-downloads-dir">
        <foreach item="Line" in="downloads.csv" delim="," property="component,source,destination">
            <echo message="&#xa; Downloading ${component} &#xa;" />
            <get src="${source}" dest="${dir.Downloads}\${destination}" usetimestamp="true" verbose="true" />
        </foreach>
    </target>

    <target name="stripdown-mariadb" description="Unzip MariaDB. Delete unnecessary files. Zip MariaDB. (136MB to 16MB on v5.5.28!)">
        <!-- target folder for unzipping -->
        <delete dir="${dir.Downloads}/stripdown" if="${directory::exists(dir.Downloads + '/stripdown')}" />
        <mkdir dir="${dir.Downloads}/stripdown" if="${not directory::exists(dir.Downloads + '/stripdown')}" />
        <!-- unzip mariadb -->
        <unzip zipfile="${dir.Downloads}\mariadb.zip" todir="${dir.Downloads}\stripdown"/>
        <!--<echo message="&#xa; Renaming versioned MariaDB folder to just mariadb. &#xa;" /> -->
        <exec program="cmd.exe" commandline="/c move ${dir.Downloads}\stripdown\mariadb* ${dir.Downloads}\stripdown\mariadb"/>
        <!-- stripdown -->
        <exec program="${dir.Base}\bin\stripdown-mariadb.bat">
            <arg value="${dir.Downloads}\stripdown\mariadb"/>
        </exec>
        <!-- rename original download file (process in use lock out?) -->
        <delete file="${dir.Downloads}\mariadb.zip" />
        <!-- create mariadb.zip, from stripdowned mariadb folder -->
        <zip zipfile="${dir.Downloads}\mariadb.zip">
            <fileset basedir="${dir.Downloads}\stripdown">
                <include name="**/*" />
            </fileset>
        </zip>
        <!-- delete the stripdown folder -->
        <delete dir="${dir.Downloads}\stripdown"/>
    </target>

    <target name="stripdown-mongodb" description="Unzip MongoDB. Delete unnecessary files. Zip MongoDb. (55MB to 16MB on v2.2.1!)">
        <!-- target folder for unzipping -->
        <delete dir="${dir.Downloads}/stripdown" if="${directory::exists(dir.Downloads + '/stripdown')}" />
        <mkdir dir="${dir.Downloads}/stripdown" if="${not directory::exists(dir.Downloads + '/stripdown')}" />
        <!-- unzip -->
        <unzip zipfile="${dir.Downloads}\mongodb.zip" todir="${dir.Downloads}\stripdown"/>
        <!--<echo message="&#xa; Renaming versioned MongoDB folder to just mongodb. &#xa;" /> -->
        <exec program="cmd.exe" commandline="/c move ${dir.Downloads}\stripdown\mongodb* ${dir.Downloads}\stripdown\mongodb"/>
        <!-- stripdown -->
        <exec program="${dir.Base}\bin\stripdown-mongodb.bat">
            <arg value="${dir.Downloads}\stripdown\mongodb"/>
        </exec>
        <!-- rename original download file (process in use lock out?) -->
        <delete file="${dir.Downloads}\mongodb.zip" />
        <!-- create mongodb.zip, from stripdowned mongodb folder -->
        <zip zipfile="${dir.Downloads}\mongodb.zip">
            <fileset basedir="${dir.Downloads}\stripdown">
                <include name="**/*" />
            </fileset>
        </zip>
        <!-- delete the stripdown folder -->
        <delete dir="${dir.Downloads}\stripdown"/>
    </target>

    <target name="make-downloads-dir" unless="${directory::exists(dir.Downloads)}">
         <mkdir dir="${dir.Downloads}"/>
    </target>

    <!-- The "git" command must be on your env path, check that with "env|grep PATH". -->
    <target name="update-git-submodules"
            description="Updating git submodules. Fetching latest version of server-control-panel and webinterface.">
        <exec program="git">
            <arg value="submodule" />
            <arg value="foreach"/>
            <arg value="git pull origin master" />
        </exec>
    </target>

    <target name="compile-server-control-panel"
            description="Compiles the Server Control Panel Tray Application via Qt Framework and it's build tools.">
            <!-- This tasks requires that you have installed Qt and setup all environment path vars correctly.
                 The build tools will not be found otherwise. -->
        <exec program="qmake">
            <arg value="${dir.Base}/server-control-panel/wpnxm-servercontrolpanel.pro" />
            <arg value="-Wall" /> <!-- Turn on all warnings -->
        </exec>
        <exec program="mingw32-make">
            <arg value="-j4" /> <!-- use 4 build jobs -->
        </exec>
    </target>

    <target name="build-server-control-panel-zip"
            description="Takes the freshly build SCP executable, adds all needed runtime DLL's of Qt and MinGW and build a zip archive for distribution."
            depends="compile-server-control-panel">
            <!-- create folders: -->
            <!-- "temp"
                 "WPN-XM-SCP-v1.2.3" -->
            <!-- copy exe -->
            <!-- copy dlls -->
            <!-- zip files content of the temp folder -->
            <!-- copy zip to the "_build" folder and to the downloads folder -->
    </target>

    <target name="all"
        depends="clean-build-dir,
                 update-git-submodules,
                 bump-version-number,
                 print-version-number,
                 compile-wpnxm-webinstaller-setup,
                 compile-wpnxm-webinstaller-debug-setup,
                 compile-wpnxm-webinstaller-with-clansuite-setup,
                 compile-wpnxm-allinone-installer">
    </target>

</project>
