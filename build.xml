<?xml version="1.0" encoding="utf-8"?>
<project xmlns="http://nant.sf.net/release/0.91/nant.xsd"
         name="WPN-XM"
         default="all">

    <!--
         WPN-XM - NANT build file.

         You might find the comprehensive Nant Task Reference under:
         http://nant.sourceforge.net/release/latest/help/tasks/index.html
    -->

    <!-- Debug Toggle -->
    <property name="wpnxm.Debug"            value="false"/>

    <!-- Version -->
    <property name="wpnxm.Name"             value="WPN-XM Server Stack"/>
    <property name="version.Major"          value="0"/>
    <property name="version.Minor"          value="4"/>
    <property name="version.BuildNumber"    value="1"/>
    <property name="wpnxm.Version"          value="${version.Major}.${version.Minor}.${version.BuildNumber}"/>

    <!-- Paths -->
    <property name="dir.Base"               value="${project::get-base-directory()}"/>
    <property name="dir.Build"              value="${dir.Base}\_build"/>
    <property name="innosetupcompiler"      value="${dir.Base}\bin\innosetup\ISCC.exe"/>

    <!-- File Names -->
    <property name="wpnxm.ExeFileName"      value="WPNXM-${wpnxm.Version}-Setup"/>
    <property name="wpnxm.ExeFile"          value="${dir.Build}\${wpnxm.ExeFileName}"/>

    <property name="wpnxm.ZipFileName"      value="WPNXM-${wpnxm.Version}.zip"/>
    <property name="wpnxm.ZipFile"          value="${dir.Build}\${wpnxm.ZipFileName}"/>

    <!-- Targets (Build Commands) -->

    <target name="clean-build-dir" description="Mr. Proper cleans the build environment and recreates it.">
        <delete dir="${dir.Build}"/>
        <mkdir dir="${dir.Build}"/>
    </target>

    <target name="bump-version-number">
        <!--
             Insert the version number into the innosetup script files.
             This is done via a copy operation with an applied filterchain, see below.
             The preprocessed iss files are moved from the /innosetup folder to the build directory.
             Then they are used for the actual build.
             Therefore this step must run before the "compile-wpnxm-setup" step.
         -->
        <copy todir="${dir.Build}" overwrite="true">
            <fileset basedir="${dir.Base}/innosetup/">
                <include name="wpn-xm.iss"/>
                <include name="wpn-xm with clansuite.iss"/>
                <include name="wpn-xm with opencandy.iss"/>
            </fileset>
            <filterchain>
                <replacetokens>
                    <token key="APPVERSION" value="${wpnxm.Version}"/>
                    <token key="DEBUG" value="${wpnxm.Debug}"/>
                </replacetokens>
            </filterchain>
        </copy>

        <!-- DEBUG executable -->
        <copy todir="${dir.Build}" overwrite="true">
            <fileset basedir="${dir.Base}/innosetup/">
                <include name="wpn-xm debug.iss"/>
            </fileset>
            <filterchain>
                <replacetokens>
                    <token key="APPVERSION" value="${wpnxm.Version}"/>
                    <!-- Debug on -->
                    <token key="DEBUG" value="true"/>
                </replacetokens>
            </filterchain>
        </copy>

        <!-- WPN-XM Server Control Panel -->
        <loadfile file="${dir.Base}/server-control-panel/src/version.h" property="filecontent.wpnxm.version">
            <filterchain>
                <replacetokens>
                     <token key="APPVERSION" value="${wpnxm.Version}"/>
                </replacetokens>
            </filterchain>
        </loadfile>
        <delete file="${dir.Base}/server-control-panel/src/version.h" />
        <echo file="${dir.Base}/server-control-panel/src/version.h">${filecontent.wpnxm.version}</echo>

        <!--
             Insert the version number into webinterface bootstrap php file.
             This is done via a copy operation with an applied filterchain, see below.
             The file is overwritten.
         -->
        <loadfile file="${dir.Base}/www/webinterface/bootstrap.php" property="filecontent.php.bootstrap" encoding="UTF-8">
            <filterchain>
                <replacetokens>
                    <token key="APPVERSION" value="${wpnxm.Version}"/>
                    <token key="DEBUG" value="${wpnxm.Debug}"/>
                </replacetokens>
            </filterchain>
        </loadfile>
        <delete file="${dir.Base}/www/webinterface/bootstrap.php" />
        <echo file="${dir.Base}/www/webinterface/bootstrap.php" encoding="UTF-8">${filecontent.php.bootstrap}</echo>
    </target>

    <target name="print-version-number">
        <echo message="Building ${wpnxm.Name}-${wpnxm.Version} Setup Executable"/>
    </target>

    <target name="compile-wpnxm-setup" description="Builds the WPN-XM setup executable.">
        <exec program="${innosetupcompiler}">
            <!-- use our alternate file name -->
            <arg value="-f${wpnxm.ExeFileName}"/>
            <!-- use our build dir as output dir -->
            <arg value="-o${dir.Build}"/>
            <!-- use files from build folder (tokens replaced) -->
            <arg value="${dir.Build}\wpn-xm.iss"/>
        </exec>
    </target>

    <target name="compile-wpnxm-with-clansuite-setup" description="Builds the WPN-XM setup executable.">
        <exec program="${innosetupcompiler}">
            <!-- use our alternate file name -->
            <arg value="-f${wpnxm.ExeFileName}-withClansuite"/>
            <!-- use our build dir as output dir -->
            <arg value="-o${dir.Build}"/>
            <!-- use files from build folder (tokens replaced) -->
            <arg value="${dir.Build}\wpn-xm with clansuite.iss"/>
        </exec>
    </target>

    <target name="compile-wpnxm-with-opencandy-setup" description="Builds the WPN-XM setup executable.">
        <exec program="${innosetupcompiler}">
            <!-- use our alternate file name -->
            <arg value="-f${wpnxm.ExeFileName}-withOpenCandy"/>
            <!-- use our build dir as output dir -->
            <arg value="-o${dir.Build}"/>
            <!-- use files from build folder (tokens replaced) -->
            <arg value="${dir.Build}\wpn-xm with opencandy.iss"/>
        </exec>
    </target>

    <target name="compile-wpnxm-debug-setup" description="Builds the WPN-XM setup executable for debugging.">
        <exec program="${innosetupcompiler}">
            <!-- use our alternate file name -->
            <arg value="-f${wpnxm.ExeFileName}-Debug"/>
            <!-- use our build dir as output dir -->
            <arg value="-o${dir.Build}"/>
            <!-- use files from build folder (tokens replaced) -->
            <arg value="${dir.Build}\wpn-xm debug.iss"/>
        </exec>
    </target>

    <target name="all"
        depends="clean-build-dir,
                 bump-version-number,
                 print-version-number,
                 compile-wpnxm-setup,
                 compile-wpnxm-debug-setup,
                 compile-wpnxm-with-clansuite-setup">
                 <!--compile-wpnxm-with-opencandy-setup-->
    </target>

</project>
