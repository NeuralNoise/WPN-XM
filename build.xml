<?xml version="1.0" encoding="utf-8"?>
<project xmlns="http://nant.sf.net/release/0.91/nant.xsd" name="WPN-XM" default="all">

    <!--
         WPN-XM - NAnt build file.

         You might find the comprehensive Nant Task Reference under:
         http://nant.sourceforge.net/release/latest/help/tasks/index.html
    -->

    <!-- @todo Split build.xml
        <property file="build.properties" />
        <import file="build-config/init-and-clean.xml"/>
        <import file="build-config/compile-and-build.xml"/>
        <import file="build-config/test.xml"/>
        <import file="build-config/dist-and-deploy.xml"/>
        <import file="build-config/quality.xml"/>
     -->

    <!--
                        Build Properties
    -->

    <!-- Version -->
    <property name="wpnxm.Name"             value="WPN-XM Server Stack"/>
    <property name="version.Major"          value="0"/>
    <property name="version.Minor"          value="8"/>
    <property name="version.BuildNumber"    value="0"/>
    <property name="wpnxm.Version"          value="${version.Major}.${version.Minor}.${version.BuildNumber}"/>

    <!-- Paths -->
    <property name="dir.Base"               value="${project::get-base-directory()}"/>
    <property name="dir.Build"              value="${dir.Base}\_build"/>
    <property name="dir.Downloads"          value="${dir.Base}\downloads"/>
    <property name="dir.Installers"         value="${dir.Base}\installers"/>

    <property name="innosetupcompiler"      value="${dir.Base}\bin\innosetup\ISCC.exe"/>
    <property name="dir.qmake"              value="D:\Qt\Qt5.2.0\5.2.0-rc1\mingw48_32\bin"/>
    <property name="dir.mingw32"            value="D:\Qt\Qt5.2.0\Tools\mingw48_32\bin\"/>

    <!--
                        Installer Filesets
    -->

    <!-- PHP 5.4 w32 -->
    <target name="fileset-php54-w32">
        <fileset id="files" basedir="${dir.Installers}">
            <include name="webinstaller-php54-w32.iss"/>
            <include name="webinstaller-debug-php54-w32.iss"/>
            <include name="allinone-php54-w32.iss"/>
            <include name="bigpack-php54-w32.iss"/>
            <include name="lite-php54-w32.iss"/>
        </fileset>
    </target>

    <!-- PHP 5.5 w32 -->
    <target name="fileset-php55-w32">
        <fileset id="files" basedir="${dir.Installers}">
            <include name="webinstaller-php55-w32.iss"/>
            <include name="webinstaller-debug-php55-w32.iss"/>
            <include name="allinone-php55-w32.iss"/>
            <include name="bigpack-php55-w32.iss"/>
            <include name="lite-php55-w32.iss"/>
        </fileset>
    </target>

    <!-- PHP 5.5 w64 -->
    <target name="fileset-php55-w64">
        <fileset id="files" basedir="${dir.Installers}">
            <include name="webinstaller-php55-w64.iss"/>
            <include name="webinstaller-debug-php55-w64.iss"/>
            <include name="allinone-php55-w64.iss"/>
            <include name="bigpack-php55-w64.iss"/>
            <include name="lite-php55-w64.iss"/>
        </fileset>
    </target>

    <!--
                        Targets (Build Commands)
    -->

    <target name="clean-build-dir" description="Mr. Proper cleans the build environment and recreates it.">
        <delete dir="${dir.Build}"/>
        <mkdir dir="${dir.Build}"/>
        <delete dir="${dir.Downloads}\stripdown"/>
    </target>

    <!--
        Insert the version number into the innosetup script files.
        This is done via a copy operation with an applied filterchain, see below.
        The then preprocessed *.iss files are moved from the /installers folder to the /build directory.
        Because they are used for the actual build, this step must run before any "compile-*" step.
     -->
    <target name="bump-version-number-in-installers">
        <echo message="&#xa;Inserting Version Number into Installer Script Fileset - '${fileset}'&#xa;" />
        <copy todir="${dir.Build}" overwrite="true">
           <fileset refid="files"/>
           <filterchain>
                <replacetokens>
                    <token key="APPVERSION" value="${wpnxm.Version}"/>
                </replacetokens>
           </filterchain>
        </copy>
    </target>

    <target name="bump-version-number"
            description="Inserts the current version number into the InnoScripts, Webinterface and Server-Control-Panel.">

        <!--
            nant does not support dynamic refid's. we have to use dynamic targets as a workaround.
            each time the target "fileset-${fileset}" is called, the static refid "files" is redefined.
            then "bump-version-number-in-installers" is called, which works on the re-defined "files" fileset.
            plain stupid bullshit!
        -->

        <property name="installer.filesets" value="php54-w32, php55-w32, php55-w64"/>
        <foreach item="String" in="${installer.filesets}" delim="," property="fileset" trim="Start">
            <do>
                <call target="fileset-${fileset}"/>
                <call target="bump-version-number-in-installers"/>
            </do>
        </foreach>

        <!-- WPN-XM Server Control Panel -->
        <loadfile file="${dir.Base}/server-control-panel/src/version.h" property="filecontent.wpnxm.version" encoding="UTF-8">
            <filterchain>
                <replacetokens>
                     <token key="APPVERSION" value="${wpnxm.Version}"/>
                </replacetokens>
            </filterchain>
        </loadfile>
        <delete file="${dir.Base}/server-control-panel/src/version.h"/>
        <echo file="${dir.Base}/server-control-panel/src/version.h">${filecontent.wpnxm.version}</echo>

        <!-- Insert the version number into webinterface's "bootstrap.php" file. (file is overwritten) -->
        <loadfile file="${dir.Base}/www/tools/webinterface/bootstrap.php" property="filecontent.php.bootstrap" encoding="UTF-8">
            <filterchain>
                <replacetokens>
                    <token key="APPVERSION" value="${wpnxm.Version}"/>
                </replacetokens>
            </filterchain>
        </loadfile>
        <delete file="${dir.Base}/www/tools/webinterface/bootstrap.php"/>
        <echo file="${dir.Base}/www/tools/webinterface/bootstrap.php" encoding="UTF-8">${filecontent.php.bootstrap}</echo>
    </target>

    <target name="print-version-number">
        <echo message="Building ${wpnxm.Name}-${wpnxm.Version} Setup Executable"/>
    </target>

    <target name="clean-webinterface-folder">
        <echo message="Cleans the webinterface folder for production, by removing .git and dev files."/>
        <!-- git -->
        <delete file="${dir.Base}/www/tools/webinterface/.git"/>
        <delete file="${dir.Base}/www/tools/webinterface/.gitignore"/>
        <delete file="${dir.Base}/www/tools/webinterface/.gitattributes"/>
        <!-- dev -->
        <delete file="${dir.Base}/www/tools/webinterface/.travis.yml"/>
        <delete file="${dir.Base}/www/tools/webinterface/composer.json"/>
        <delete dir="${dir.Base}/www/tools/webinterface/tests"/>
    </target>
    
    <target name="inno-compile">
        <echo message="Compiling ${installer.file}"/>
        <exec program="${innosetupcompiler}">
                <!-- use our build dir as output dir -->
                <arg value="-o${dir.Build}"/>
                <!-- use files from build folder (tokens replaced) -->
                <arg value="${installer.file}"/>
        </exec>
    </target>

    <target name="compile-webinstaller" description="Builds the WPN-XM setup executable."
            depends="bump-version-number, clean-webinterface-folder">
        <foreach item="File" property="installer.file">
        <in>
            <items basedir="${dir.Build}">
              <include name="**/webinstaller-*.iss" />
            </items>
        </in>
        <do>
            <call target="inno-compile"/>
        </do>
        </foreach>
    </target>

    <target name="compile-webinstaller-debug" description="Builds the WPN-XM setup executable for debugging."
            depends="bump-version-number, clean-webinterface-folder">
        <foreach item="File" property="installer.file">
        <in>
            <items basedir="${dir.Build}">
              <include name="**/webinstaller-debug-*.iss" />
            </items>
        </in>
        <do>
            <call target="inno-compile"/>
        </do>
        </foreach>       
    </target>

    <target name="compile-lite" description="Downloads all components and builds the WPN-XM setup executable."
            depends="download-components, stripdown-mariadb, prepare-downloads-lite">
        <foreach item="File" property="installer.file">
        <in>
            <items basedir="${dir.Build}">
              <include name="**/lite-*.iss" />
            </items>
        </in>
        <do>
            <call target="inno-compile"/>
        </do>
        </foreach>        
    </target>

    <target name="prepare-downloads-lite" description="Moves all components for the Lite installer from the downloads folder to downloads/lite."
            depends="versionize-registries">
        <echo message="&#xa; Moving All-In-One Components &#xa;"/>
        <foreach item="Line" in="${dir.Base}/registry/wpnxm-software-registry-lite-${wpnxm.Version}-w32.csv" delim=","
                 property="component,source,destination,version">
            <copy file="${dir.Downloads}\${destination}" tofile="${dir.Downloads}\lite\${destination}"/>
        </foreach>
    </target>

    <target name="prepare-downloads-allinone"
            description="Moves all components for the All-In-One installer from the downloads folder to downloads/allinone."
            depends="versionize-registries">
        <echo message="&#xa; Moving All-In-One Components &#xa;"/>
        <foreach item="Line" in="${dir.Base}/registry/wpnxm-software-registry-allinone-${wpnxm.Version}-w32.csv" delim=","
                 property="component,source,destination,version">
            <copy file="${dir.Downloads}\${destination}" tofile="${dir.Downloads}\allinone\${destination}"/>
        </foreach>
    </target>

    <target name="compile-lite-no-download"
            description="Builds the WPN-XM setup executable using already downloaded components. Assumes that stripdowns are done."
            depends="bump-version-number, clean-webinterface-folder">
        <foreach item="File" property="installer.file">
        <in>
            <items basedir="${dir.Build}">
              <include name="**/lite-*.iss" />
            </items>
        </in>
        <do>
            <call target="inno-compile"/>
        </do>
        </foreach>       
    </target>

    <target name="compile-allinone"
            description="Downloads all components and builds the WPN-XM setup executable."
            depends="download-components, stripdown-mariadb, stripdown-mongodb, stripdown-postgresql, prepare-downloads-allinone">
        <foreach item="File" property="installer.file">
        <in>
            <items basedir="${dir.Build}">
              <include name="**/allinone-*.iss" />
            </items>
        </in>
        <do>
            <call target="inno-compile"/>
        </do>
        </foreach>        
    </target>

    <target name="compile-allinone-no-download"
            description="Builds the WPN-XM setup executable using already downloaded components. Assumes that stripdowns are done."
            depends="bump-version-number, clean-webinterface-folder">
        <foreach item="File" property="installer.file">
        <in>
            <items basedir="${dir.Build}">
              <include name="**/allinone-*.iss" />
            </items>
        </in>
        <do>
            <call target="inno-compile"/>
        </do>
        </foreach>        
    </target>

    <target name="compile-bigpack"
            description="Downloads all components and builds the WPN-XM setup executable."
            depends="download-components, stripdown-mariadb, stripdown-mongodb, stripdown-postgresql">
        <foreach item="File" property="installer.file">
        <in>
            <items basedir="${dir.Build}">
              <include name="**/bigpack-*.iss" />
            </items>
        </in>
        <do>
            <call target="inno-compile"/>
        </do>
        </foreach>        
    </target>

    <target name="compile-bigpack-no-download"
            description="Builds the WPN-XM setup executable using already downloaded components. Assumes that stripdowns are done."
            depends="bump-version-number, clean-webinterface-folder">
         <foreach item="File" property="installer.file">
        <in>
            <items basedir="${dir.Build}">
              <include name="**/bigpack-*.iss" />
            </items>
        </in>
        <do>
            <call target="inno-compile"/>
        </do>
        </foreach>
    </target>

    <target name="versionize-registries"
            description="Adds the current version number to the registry .csv files.">
        <echo message="&#xa; Versionizing Registries &#xa;"/>
        <echo message="&#xa;  | Big-Pack &#xa;"/>
        <copy file="${dir.Base}/registry/wpnxm-software-registry-bigpack-w32.csv"
            tofile="${dir.Base}/registry/wpnxm-software-registry-bigpack-${wpnxm.Version}-w32.csv"/>
        <echo message="&#xa;  | All-In-One &#xa;"/>
        <copy file="${dir.Base}/registry/wpnxm-software-registry-allinone-w32.csv"
            tofile="${dir.Base}/registry/wpnxm-software-registry-allinone-${wpnxm.Version}-w32.csv"/>
        <echo message="&#xa;  | Lite &#xa;"/>
        <copy file="${dir.Base}/registry/wpnxm-software-registry-lite-w32.csv"
            tofile="${dir.Base}/registry/wpnxm-software-registry-lite-${wpnxm.Version}-w32.csv"/>
    </target>

    <target name="download-components" description="Downloads all components for building the 'not-web' Installers."
            depends="make-downloads-dir, update-git-submodules, versionize-registries">

        <!-- ${dir.Base}/registry/wpnxm-software-registry-bigpack-${wpnxm.Version}-w32.csv" delim="," -->

        <!-- Aria2C - http://sourceforge.net/apps/trac/aria2/wiki/UsageExample
                      http://aria2.sourceforge.net/manual/en/html/aria2c.html-->
        <exec program="cmd.exe" commandline="/c ${dir.Base}\bin\aria\aria2c.exe">
            <arg value="-i ${dir.Base}\registry\downloads.txt"/>
            <arg value="-d ${dir.Base}\downloads"/>
            <arg value="--max-connection-per-server=8"/>
            <arg value="--min-split-size=1M"/>
            <arg value="--max-tries=5"/>
            <arg value="--file-allocation=falloc"/>
            <arg value="--check-certificate=false"/>
            <arg value="--conditional-get=true"/>
            <arg value="--auto-file-renaming=false"/>
            <arg value="--allow-overwrite=true"/>
            <arg value="--http-accept-gzip=true"/>
            <arg value="--http-no-cache=true"/>
            <arg value="--user-agent=WPN-XM Server Stack Downloader"/>
        </exec>

    </target>

    <target name="stripdown-mariadb" description="Unzip MariaDB. Delete unnecessary files. Zip MariaDB. (136MB to 16MB on v5.5.28!)"
            if="${file::get-length(dir.Downloads + '\mariadb.zip') &gt; 25000000}"><!-- 25MB -->
        <!-- target folder for unzipping -->
        <delete dir="${dir.Downloads}/stripdown" if="${directory::exists(dir.Downloads + '/stripdown')}"/>
        <mkdir dir="${dir.Downloads}/stripdown" if="${not directory::exists(dir.Downloads + '/stripdown')}"/>
        <!-- unzip mariadb -->
        <unzip zipfile="${dir.Downloads}\mariadb.zip" todir="${dir.Downloads}\stripdown"/>
        <exec program="cmd.exe" commandline="/c move ${dir.Downloads}\stripdown\mariadb* ${dir.Downloads}\stripdown\mariadb"/>
        <!-- stripdown -->
        <exec program="${dir.Base}\bin\stripdown-mariadb.bat">
            <arg value="${dir.Downloads}\stripdown\mariadb"/>
        </exec>
        <!-- rename original download file (process in use lock out?) -->
        <delete file="${dir.Downloads}\mariadb.zip"/>
        <!-- create mariadb.zip, from stripdowned mariadb folder -->
        <zip zipfile="${dir.Downloads}\mariadb.zip">
            <fileset basedir="${dir.Downloads}\stripdown">
                <include name="**/*"/>
            </fileset>
        </zip>
        <!-- delete the stripdown folder -->
        <delete dir="${dir.Downloads}\stripdown"/>
    </target>

    <target name="stripdown-mongodb" description="Unzip MongoDB. Delete unnecessary files. Zip MongoDb. (55MB to 16MB on v2.2.1!)"
            if="${file::get-length(dir.Downloads + '\mongodb.zip') &gt; 50000000}"><!-- 50MB -->
        <!-- target folder for unzipping -->
        <delete dir="${dir.Downloads}/stripdown" if="${directory::exists(dir.Downloads + '/stripdown')}"/>
        <mkdir dir="${dir.Downloads}/stripdown" if="${not directory::exists(dir.Downloads + '/stripdown')}"/>
        <!-- unzip -->
        <unzip zipfile="${dir.Downloads}\mongodb.zip" todir="${dir.Downloads}\stripdown"/>
        <exec program="cmd.exe" commandline="/c move ${dir.Downloads}\stripdown\mongo* ${dir.Downloads}\stripdown\mongodb"/>
        <!-- stripdown -->
        <exec program="${dir.Base}\bin\stripdown-mongodb.bat">
            <arg value="${dir.Downloads}\stripdown\mongodb"/>
        </exec>
        <!-- rename original download file (process in use lock out?) -->
        <delete file="${dir.Downloads}\mongodb.zip"/>
        <!-- create mongodb.zip, from stripdowned mongodb folder -->
        <zip zipfile="${dir.Downloads}\mongodb.zip">
            <fileset basedir="${dir.Downloads}\stripdown">
                <include name="**/*"/>
            </fileset>
        </zip>
        <!-- delete the stripdown folder -->
        <delete dir="${dir.Downloads}\stripdown"/>
    </target>

    <target name="stripdown-postgresql" description="Unzip PostgreSQL. Delete unnecessary files. Zip Postgresql. (xxMB to xxMB on vx.y.z!)"
            if="${file::get-length(dir.Downloads + '\postgresql.zip') &gt; 25000000}"><!-- 25MB -->
        <!-- target folder for unzipping -->
        <delete dir="${dir.Downloads}/stripdown" if="${directory::exists(dir.Downloads + '/stripdown')}"/>
        <mkdir dir="${dir.Downloads}/stripdown" if="${not directory::exists(dir.Downloads + '/stripdown')}"/>
        <!-- unzip -->
        <unzip zipfile="${dir.Downloads}\postgresql.zip" todir="${dir.Downloads}\stripdown"/>
        <!-- stripdown -->
        <exec program="${dir.Base}\bin\stripdown-postgresql.bat">
            <arg value="${dir.Downloads}\stripdown\pgsql"/>
        </exec>
        <!-- rename original download file (process in use lock out?) -->
        <delete file="${dir.Downloads}\postgresql.zip"/>
        <!-- create postgresql.zip, from stripdowned postgresql folder -->
        <zip zipfile="${dir.Downloads}\postgresql.zip">
            <fileset basedir="${dir.Downloads}\stripdown">
                <include name="**/*"/>
            </fileset>
        </zip>
        <!-- delete the stripdown folder -->
        <delete dir="${dir.Downloads}\stripdown"/>
    </target>

    <target name="make-downloads-dir" unless="${directory::exists(dir.Downloads)}">
         <mkdir dir="${dir.Downloads}"/>
    </target>

    <!-- The "git" command must be on your env path, check that with "env|grep PATH". -->
    <target name="update-git-submodules"
            description="Updating git submodules. Fetching latest version of server-control-panel and webinterface.">
        <exec program="git">
             <arg value="submodule"/>
             <arg value="update"/>
             <arg value="--init"/>
             <arg value="--recursive"/>
             <arg value="--force"/>
        </exec>
        <exec program="git">
            <arg value="submodule"/>
            <arg value="foreach"/>
            <arg value="git pull origin master"/>
        </exec>
    </target>

    <target name="compile-server-control-panel"
            description="Compiles the Server Control Panel Tray Application via Qt Framework and it's build tools."
            depends="update-git-submodules, bump-version-number">
            <!-- This tasks requires that you have installed Qt and setup all environment path vars correctly.
                 The build tools will not be found otherwise. -->

        <echo message="&#xa;"/>
        <exec program="qmake" basedir="${dir.qmake}">
            <arg value="-v"/>
        </exec>

        <echo message="&#xa;QMAKE Query"/>
        <exec program="qmake" basedir="${dir.qmake}">
            <arg value="-query"/>
        </exec>

        <echo message="&#xa;Clean Server-Control-Panel folder&#xa;"/>
        <exec program="git" workingdir="${dir.Base}/server-control-panel/">
            <arg value="clean"/>
            <arg value="-fxd"/><!-- remove files, ignores and folders. you might add "n" for dry-run -->
        </exec>

        <echo message="&#xa;"/>
        <!-- http://doc-snapshot.qt-project.org/4.8/qmake-variable-reference.html -->
        <exec program="qmake" workingdir="${dir.Base}/server-control-panel/" basedir="${dir.qmake}"
              commandline="-r -spec win32-g++ -o Makefile ${dir.Base}/server-control-panel/wpnxm-servercontrolpanel.pro -Wall">
        </exec>

        <echo message="&#xa;"/>
        <exec program="mingw32-make" basedir="${dir.mingw32}">
            <arg value="-v"/>
        </exec>

        <echo message="&#xa;"/>
        <exec program="mingw32-make" workingdir="${dir.Base}/server-control-panel/" basedir="${dir.mingw32}"
              commandline="-f Makefile.Release -j4"> <!-- use 4 build jobs -->
              <environment>
                <variable name="PATH" value="${dir.mingw32}" />
              </environment>
        </exec>

        <echo message="&#xa;Copy runtime deependencies of Qt&#xa;"/>
        <exec program="mingw32-make" workingdir="${dir.Base}/server-control-panel/" basedir="${dir.mingw32}">
            <arg value="install"/>
        </exec>

        <echo message="&#xa;Cleaning build directory&#xa;"/>
        <exec program="mingw32-make" workingdir="${dir.Base}/server-control-panel/" basedir="${dir.mingw32}">
            <arg value="clean"/>
        </exec>

        <echo message="&#xa;Removing all unneeded debugging symbols and sections from executable...&#xa;"/>
        <exec program="strip.exe" verbose="true" basedir="${dir.mingw32}" workingdir="${dir.Base}/server-control-panel/build/release/"
              commandline="-s wpn-xm.exe -o wpn-xm.exe.stripped"/>
        <sleep seconds="3"/>
        <exec program="cmd.exe" workingdir="${dir.Base}/server-control-panel/build/release/"
            commandline="/c move wpn-xm.exe.stripped wpn-xm.exe"/>

        <echo message="&#xa;Compressing executable...&#xa;"/>
        <exec program="${dir.Base}/bin/upx/upx" verbose="true">
            <arg line="-9 ${dir.Base}/server-control-panel/build/release/*.exe"/>
        </exec>
    </target>

    <target name="build-server-control-panel"
            description="Prepares the freshly build SCP zip archive for distribution."
            depends="compile-server-control-panel">
            <!-- zip the build/release folder to "_build/wpnxm-scp-1.2.3"-->
            <echo message="&#xa;Building zip archive of Server-Control-Panel for distribution&#xa;"/>
            <zip zipfile="${dir.Base}/_build/wpnxm-scp-${wpnxm.Version}.zip" ziplevel="9" verbose="true">
                <fileset basedir="${dir.Base}/server-control-panel/build/release/">
                    <include name="**/*" />
                </fileset>
            </zip>
            <!-- copy zip to the downloads folder -->
            <copy file="${dir.Base}/_build/wpnxm-scp-${wpnxm.Version}.zip" tofile="${dir.Base}/downloads/wpnxmscp.zip" />

            <echo message="&#xa;Clean Server-Control-Panel folder&#xa;"/>
            <exec program="git" workingdir="${dir.Base}/server-control-panel/">
                <arg value="clean"/>
                <arg value="-fxd"/><!-- remove files, ignores and folders. you might add "n" for dry-run -->
            </exec>
    </target>

    <target name="commit-versionized-registries"
            description="Commits the versionized WPN-XM Software Component Registries (all untracked files in /registry folder).">
         <exec program="git" workingdir="${dir.Base}/registry">
            <arg value="add"/>
            <arg value="-A"/>
        </exec>
        <exec program="git"  workingdir="${dir.Base}/registry">
            <arg value="commit"/>
            <arg value="-am Added WPN-XM Software Components Registry for Version ${wpnxm.Version}"/>
        </exec>
    </target>

    <target name="reset-git-submodules"
            description="Reset the git submodules to their original state. This reverts all changes made by bump-version-number during the replace operation.">
        <!-- we need to refetch the webinterface folder from git, in case we already removed .git artefacts for production (clean-webinterface-folder)
             we simply delete it, then it gets fully refetched as submodule
             -->
        <delete if="${not file::exists(dir.Base+'/www/tools/webinterface/.git')}" dir="${dir.Base}/www/tools/webinterface"/>
        <exec program="git">
            <arg value="submodule"/>
            <arg value="foreach"/>
            <!-- <arg value="git checkout ."/> -->
            <arg value="git reset --hard HEAD;"/> <!-- hard reset to latest commit -->
            <arg value="git clean -fxd"/> <!-- drop all untracked files, folders, e.g. /build crap. -->
        </exec>
    </target>
    
    <target name="kill-aria">
        <exec program="${dir.Base}\bin\killprocess\Process.exe">
            <arg value="-k aria2c.exe"/>
        </exec>    
    </target>

    <target name="all"
        depends="clean-build-dir,
                 reset-git-submodules,
                 update-git-submodules,
                 bump-version-number,
                 print-version-number,
                 clean-webinterface-folder,
                 compile-webinstaller,
                 compile-webinstaller-debug,
                 compile-allinone,
                 compile-bigpack,
                 compile-lite,
                 commit-versionized-registries,
                 reset-git-submodules,
                 kill-aria">
    </target>

</project>